// <auto-generated />
using HealthDiary.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthDiary.Migrations
{
    [DbContext(typeof(AbobaDbContext))]
    [Migration("20240127205053_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthDiary.Entities.PhysicalCharacteristics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PhysicalCharacteristics");
                });

            modelBuilder.Entity("HealthDiary.Entities.PhysicalProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("GainWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LoseWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Metabolism")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StaticWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("PhysicalHealthProfiles");
                });

            modelBuilder.Entity("HealthDiary.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HealthDiary.Entities.PhysicalCharacteristics", b =>
                {
                    b.HasOne("HealthDiary.Entities.User", "User")
                        .WithOne("PhysicalCharacteristics")
                        .HasForeignKey("HealthDiary.Entities.PhysicalCharacteristics", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthDiary.Entities.PhysicalProfile", b =>
                {
                    b.HasOne("HealthDiary.Entities.User", "User")
                        .WithOne("PhysicalProfile")
                        .HasForeignKey("HealthDiary.Entities.PhysicalProfile", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthDiary.Entities.User", b =>
                {
                    b.Navigation("PhysicalCharacteristics");

                    b.Navigation("PhysicalProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
